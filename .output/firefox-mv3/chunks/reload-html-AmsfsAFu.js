true&&(function polyfill() {
    const relList = document.createElement('link').relList;
    if (relList && relList.supports && relList.supports('modulepreload')) {
        return;
    }
    for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
    }
    new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            if (mutation.type !== 'childList') {
                continue;
            }
            for (const node of mutation.addedNodes) {
                if (node.tagName === 'LINK' && node.rel === 'modulepreload')
                    processPreload(node);
            }
        }
    }).observe(document, { childList: true, subtree: true });
    function getFetchOpts(link) {
        const fetchOpts = {};
        if (link.integrity)
            fetchOpts.integrity = link.integrity;
        if (link.referrerPolicy)
            fetchOpts.referrerPolicy = link.referrerPolicy;
        if (link.crossOrigin === 'use-credentials')
            fetchOpts.credentials = 'include';
        else if (link.crossOrigin === 'anonymous')
            fetchOpts.credentials = 'omit';
        else
            fetchOpts.credentials = 'same-origin';
        return fetchOpts;
    }
    function processPreload(link) {
        if (link.ep)
            // ep marker = processed
            return;
        link.ep = true;
        // prepopulate the load record
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
    }
}());

function print(method, ...args) {
  if (typeof args[0] === "string") {
    const message = args.shift();
    method(`[wxt] ${message}`, ...args);
  } else {
    method("[wxt]", ...args);
  }
}
var logger = {
  debug: (...args) => print(console.debug, ...args),
  log: (...args) => print(console.log, ...args),
  warn: (...args) => print(console.warn, ...args),
  error: (...args) => print(console.error, ...args)
};
function setupWebSocket(onMessage) {
  const serverUrl = `${"ws:"}//${"localhost"}:${3e3}`;
  logger.debug("Connecting to dev server @", serverUrl);
  const ws = new WebSocket(serverUrl, "vite-hmr");
  ws.addEventListener("open", () => {
    logger.debug("Connected to dev server");
  });
  ws.addEventListener("close", () => {
    logger.debug("Disconnected from dev server");
  });
  ws.addEventListener("error", (event) => {
    logger.error("Failed to connect to dev server", event);
  });
  ws.addEventListener("message", (e) => {
    try {
      const message = JSON.parse(e.data);
      if (message.type === "custom" && message.event?.startsWith?.("wxt:")) {
        onMessage?.(message);
      }
    } catch (err) {
      logger.error("Failed to handle message", err);
    }
  });
  return ws;
}
{
  try {
    setupWebSocket((message) => {
      if (message.event === "wxt:reload-page") {
        if (message.data === location.pathname.substring(1)) {
          location.reload();
        }
      }
    });
  } catch (err) {
    logger.error("Failed to setup web socket connection with dev server", err);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsb2FkLWh0bWwtQW1zZnNBRnUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS93eHRAMC4xOC40L25vZGVfbW9kdWxlcy93eHQvZGlzdC92aXJ0dWFsL3JlbG9hZC1odG1sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zYW5kYm94L3V0aWxzL2xvZ2dlci50c1xuZnVuY3Rpb24gcHJpbnQobWV0aG9kLCAuLi5hcmdzKSB7XG4gIGlmIChpbXBvcnQubWV0YS5lbnYuTU9ERSA9PT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgcmV0dXJuO1xuICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYXJncy5zaGlmdCgpO1xuICAgIG1ldGhvZChgW3d4dF0gJHttZXNzYWdlfWAsIC4uLmFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZChcIlt3eHRdXCIsIC4uLmFyZ3MpO1xuICB9XG59XG52YXIgbG9nZ2VyID0ge1xuICBkZWJ1ZzogKC4uLmFyZ3MpID0+IHByaW50KGNvbnNvbGUuZGVidWcsIC4uLmFyZ3MpLFxuICBsb2c6ICguLi5hcmdzKSA9PiBwcmludChjb25zb2xlLmxvZywgLi4uYXJncyksXG4gIHdhcm46ICguLi5hcmdzKSA9PiBwcmludChjb25zb2xlLndhcm4sIC4uLmFyZ3MpLFxuICBlcnJvcjogKC4uLmFyZ3MpID0+IHByaW50KGNvbnNvbGUuZXJyb3IsIC4uLmFyZ3MpXG59O1xuXG4vLyBzcmMvdmlydHVhbC91dGlscy9zZXR1cC13ZWItc29ja2V0LnRzXG5mdW5jdGlvbiBzZXR1cFdlYlNvY2tldChvbk1lc3NhZ2UpIHtcbiAgY29uc3Qgc2VydmVyVXJsID0gYCR7X19ERVZfU0VSVkVSX1BST1RPQ09MX199Ly8ke19fREVWX1NFUlZFUl9IT1NUTkFNRV9ffToke19fREVWX1NFUlZFUl9QT1JUX199YDtcbiAgbG9nZ2VyLmRlYnVnKFwiQ29ubmVjdGluZyB0byBkZXYgc2VydmVyIEBcIiwgc2VydmVyVXJsKTtcbiAgY29uc3Qgd3MgPSBuZXcgV2ViU29ja2V0KHNlcnZlclVybCwgXCJ2aXRlLWhtclwiKTtcbiAgd3MuYWRkRXZlbnRMaXN0ZW5lcihcIm9wZW5cIiwgKCkgPT4ge1xuICAgIGxvZ2dlci5kZWJ1ZyhcIkNvbm5lY3RlZCB0byBkZXYgc2VydmVyXCIpO1xuICB9KTtcbiAgd3MuYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsICgpID0+IHtcbiAgICBsb2dnZXIuZGVidWcoXCJEaXNjb25uZWN0ZWQgZnJvbSBkZXYgc2VydmVyXCIpO1xuICB9KTtcbiAgd3MuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIChldmVudCkgPT4ge1xuICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byBjb25uZWN0IHRvIGRldiBzZXJ2ZXJcIiwgZXZlbnQpO1xuICB9KTtcbiAgd3MuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKGUpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiY3VzdG9tXCIgJiYgbWVzc2FnZS5ldmVudD8uc3RhcnRzV2l0aD8uKFwid3h0OlwiKSkge1xuICAgICAgICBvbk1lc3NhZ2U/LihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byBoYW5kbGUgbWVzc2FnZVwiLCBlcnIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB3cztcbn1cblxuLy8gc3JjL3ZpcnR1YWwvcmVsb2FkLWh0bWwudHNcbmlmIChpbXBvcnQubWV0YS5lbnYuQ09NTUFORCA9PT0gXCJzZXJ2ZVwiKSB7XG4gIHRyeSB7XG4gICAgc2V0dXBXZWJTb2NrZXQoKG1lc3NhZ2UpID0+IHtcbiAgICAgIGlmIChtZXNzYWdlLmV2ZW50ID09PSBcInd4dDpyZWxvYWQtcGFnZVwiKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEgPT09IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cmluZygxKSkge1xuICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byBzZXR1cCB3ZWIgc29ja2V0IGNvbm5lY3Rpb24gd2l0aCBkZXYgc2VydmVyXCIsIGVycik7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLFFBQUEsQ0FBUyxLQUFBLENBQU0sV0FBVyxJQUFNLENBQUEsQ0FBQSxDQUFBO0FBRzlCLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBSSxPQUFPLElBQUEsQ0FBSyxDQUFDLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFNLFFBQVUsQ0FBQSxDQUFBLENBQUE7QUFDL0IsQ0FBQSxDQUFBLENBQUEsQ0FBTSxNQUFBLE9BQUEsQ0FBQSxDQUFBLENBQVUsS0FBSyxLQUFNLEVBQUEsQ0FBQTtBQUMzQixDQUFBLENBQUEsQ0FBQSxDQUFBLE1BQUEsQ0FBTyxDQUFTLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLE9BQU8sQ0FBSSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBRyxJQUFJLENBQUEsQ0FBQTtBQUFBLENBQUEsQ0FBQSxDQUM3QixDQUFBLElBQUEsQ0FBQSxDQUFBO0FBQ0wsQ0FBQSxDQUFBLENBQUEsQ0FBTyxNQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQVMsQ0FBRyxDQUFBLENBQUEsSUFBSSxDQUFBLENBQUE7QUFBQSxDQUN6QixDQUFBLENBQUE7QUFDRixDQUFBO0FBQ0EsR0FBQSxDQUFJLE1BQVMsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBLENBQUEsQ0FDWCxPQUFPLENBQUksQ0FBQSxDQUFB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QUFZLFFBQVEsS0FBTyxDQUFBLENBQUEsVUFBQSxDQUFhLENBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFNLENBQUcsQ0FBQSxDQUFBLENBQUE7QUFDcEUsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLENBQVksT0FBTyxDQUFBLENBQUE7QUFBQSxDQUNyQixDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBLFdBQ08sQ0FBQSxDQUFBLEdBQUssQ0FBQSxDQUFBLENBQUE7QUFDWixDQUFPLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxNQUFBLENBQUEsS0FBQSxDQUFNLDJCQUE0QixDQUFBLEdBQUcsQ0FBQSxDQUFBO0FBQUEsQ0FDOUMsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBLENBQUEsQ0FBQSxDQUNELENBQUEsQ0FBQTtBQUNELENBQU8sQ0FBQSxNQUFBLENBQUEsRUFBQSxDQUFBO0FBQ1QsQ0FBQTtBQUd5QyxDQUFBO0FBQ3ZDLENBQUEsQ0FBSSxHQUFBLENBQUEsQ0FBQTtBQUNGLENBQUEsQ0FBQSxDQUFBLENBQUEsY0FBQSxDQUFlLENBQUMsT0FBWSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUMxQixDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBSSxJQUFBLE9BQUEsQ0FBUSxVQUFVLGlCQUFtQixDQUFBLENBQUEsQ0FBQTtBQUN2QyxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFBSSxDQUFBLENBQUEsUUFBUSxJQUFTLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxRQUFBLENBQVMsUUFBUyxDQUFBLFNBQUEsQ0FBVSxDQUFDLENBQUcsQ0FBQSxDQUFBLENBQUE7QUFDbkQsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxRQUFBLENBQVMsTUFBTyxDQUFBLENBQUEsQ0FBQTtBQUFBLENBQ2xCLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBLENBQ0YsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQ0QsQ0FBQSxDQUFBO0FBQUEsU0FDTSxDQUFBLENBQUEsR0FBSyxDQUFBLENBQUEsQ0FBQTtBQUNaLENBQU8sQ0FBQSxDQUFBLENBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBTSx3REFBeUQsQ0FBQSxHQUFHLENBQUEsQ0FBQTtBQUFBLENBQzNFLENBQUEsQ0FBQTtBQUNGIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzBdfQ==
